#!/usr/bin/env fish

# This script normalizes, noise supresses, cuts silence, and transcribes, a video.
#
# As always it is recommended to make backups of important files before using this script.
#
# The script searches for video files to process from the current working directory recursively, and ignores
# already processed files.
#
# Cutting here means speed up a section of video if it is below a volume threshold, and there are no subtitles.
# The transcriptions are put into a transcription stream in the video file. Additionally a video file will be
# Generated which has the subtitles baked into the video.
#
# Note that no relative path of a file to be processed is allowed to contain a single quote otherwise the 
# subtitle baking will fail, and the script will exit.

# This script requires the following variables to be set correctly:
# The RNN noise removal model file. Get it from: https://github.com/GregorR/rnnoise-models.git OR https://github.com/richardpl/arnndn-models
set noise_filter_model_path "/home/johannes/rnnoise-models/beguiling-drafter-2018-08-30/bd.rnnn"

# This script requires the following programs in PATH (in addition it requires fish obviously)
# - whisper-ctranslate2, note that the large-v2 model takes less than 4GB VRAM irrc, if you use int8 quantization (or something similar)
# - ffmpeg
# - ffmpeg-normalize
# - auto-editor
# - vad, this script is located in this repo

function help
    set name (basename (status filename))
    echo "usage:"
    echo "  $name [OPTIONS] [FILES]"
    echo "Options:"
    echo "  --help -h             Print this help."
    echo "  --yes  -y             Don't prompt for confirmation."
    echo "  --silent_speed FLOAT  How fast to play silent parts [defalut: $SILENT_SPEED_DEFAULT]"
    echo "  --youtube_prep        Prepare a baked subtitle file, and a .vtt"
    echo "                        transcript without highlighting."
    echo "  --cut                 Cut out the silent parts instead of speeding"
    echo "                        them up."
    echo "  --device_index        The GPU device index that whisper should"
    echo "                        use. [default: $DEVICE_INDEX_DEFAULT]"
    echo "  --compute_type        The compute type whisper should use. [default: $COMPUTE_TYPE_DEFAULT]"
    echo "  --keep_intermediate   Don't delete the TMP folder (useful for debugging)."
    echo "  --threshold            The threshold for the VAD probability to count as speech. [default: $THRESHOLD_DEFAULT]"
    exit 0
end

# Constants
set NORMALIZE true
set DENOISE true
set CUT_SILENCE true

# Handeling arguments
argparse h/help y/yes 'silent_speed=' youtube_prep cut 'device_index=' 'compute_type=' keep_intermediate 'threshold=' -- $argv || exit 1

set SILENT_SPEED_DEFAULT 18
set THRESHOLD_DEFAULT 0.40
set COMPUTE_TYPE_DEFAULT auto
set DEVICE_INDEX_DEFAULT 0

## Setting defaults
if [ -z "$_flag_silent_speed" ]
    set _flag_silent_speed "$SILENT_SPEED_DEFAULT"
end
if [ -z "$_flag_compute_type" ]
    set _flag_compute_type "$COMPUTE_TYPE_DEFAULT"
end
if [ -z "$_flag_device_index" ]
    set _flag_device_index "$DEVICE_INDEX_DEFAULT"
end
if [ -z "$_flag_threshold" ]
    set _flag_threshold "$THRESHOLD_DEFAULT"
end

## Further argument handeling
if [ -n "$_flag_cut" ]
    set _flag_silent_speed 0
end
if [ -n "$_flag_help" ]
    help
end

function trim_ext
    argparse t/trim_path -- $argv
    if [ -n "$_flag_trim_path" ]
        trim_ext (basename "$argv[1]")
    else
        echo "$argv[1]" | rev | cut -d"." -f2- | rev
    end
end

function find-files-recursively
    set target_files (find . -name '*.mkv' -not -name '*_FIN.mkv' -not -name '*_FIN_BAKED.mkv' -not -path '*/TMP/*' | sort --reverse)

    # Filter the files to ignore already processed files.
    for file in $target_files
        set base_path (trim_ext "$file")
        set out_file "$base_path"_FIN.mkv
        if [ -f "$out_file" ]
            # echo "For this file there is already a subed file: $file"
            continue
        end
        set -p filtered_target_files "$file"
    end

    for f in $filtered_target_files
        echo "$f"
    end
end

function normalize \
        --description "Given a media file, normalize that media files audio, and return the path to the newly generated file"
    echo -e "\nNormalizing Audio" >&2

    argparse 'input_file=' 'tmp_dir=' -- $argv >&2 || return 1
    if [ -z "$_flag_input_file" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    set output_file "$_flag_tmp_dir/$(uuid).mkv"
    ffmpeg-normalize -o "$output_file" -f --loudness-range-target 5.0 --dual-mono --true-peak -1 --progress "$_flag_input_file" >&2 || return 1
    echo "$output_file"
end

function denoise
    echo -e "\nFilter audio streamout audio noise" >&2

    argparse 'input_file=' 'tmp_dir=' -- $argv
    if [ -z "$_flag_input_file" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    set output_file "$_flag_tmp_dir/$(uuid).mkv"
    ffmpeg -i "$_flag_input_file" -af "arnndn=m=$noise_filter_model_path" -c:v copy "$output_file" >&2 || return 1
    echo "$output_file"
end

function cut-silence
    echo -e "\nCutting video File" >&2

    argparse 'input_file=' 'tmp_dir=' -- $argv
    if [ -z "$_flag_input_file" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    set output_file "$_flag_tmp_dir/$(uuid).mkv"
    auto-editor "$_flag_input_file" --margin 0.2s,0.2s --silent_speed "$_flag_silent_speed" --video-bitrate unset --no-open --output "$output_file" --mark-as-loud (vad timestamps "$_flag_input_file" --threshold "$_flag_threshold" | string split -n " ") >&2
    echo "$output_file"
end

function generate-transcript \
        --description "take in a media file and generate an audio transcription"
    echo -e "\nGenerate transcript" >&2

    argparse 'input_file=' 'tmp_dir=' -- $argv
    if [ -z "$_flag_input_file" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    set -l output_file "$_flag_tmp_dir/$(uuid).mkv"
    set -l output_dir "$_flag_tmp_dir/$(uuid)"
    whisper-ctranslate2 --model large-v2 --device_index "$_flag_device_index" --compute_type "$_flag_compute_type" --word_timestamps true --highlight_words true --output_dir "$output_dir" --output_format vtt "$_flag_input_file" >&2 || return 1
    mv "$output_dir"/*.vtt "$output_file" >&2
    echo "$output_file"
end

function embed-subtitles \
        --description "Take a subtitle file and embed it into a video file as a separate track"
    echo "Embedding Subtitiles" >&2

    argparse 'input_file=' 'transcript=' 'tmp_dir=' -- $argv || return 1
    if [ -z "$_flag_input_file" -o -z "$_flag_transcript" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    echo -e "\nBakeing the transcription into a subtitle stream of the video file" >&2
    set output_file "$_flag_tmp_dir/$(uuid).mkv"
    ffmpeg -y -i "$_flag_input_file" -i "$_flag_transcript" -c copy -c:s copy "$output_file" || return 1 >&2
    echo "$output_file"
end

function bake-subtitles \
        --description "Take a subtitle file and bake the subtitles into the video as pixels"
    echo "Baking Subtitles" >&2

    argparse 'input_file=' 'transcript=' 'tmp_dir=' -- $argv
    if [ -z "$_flag_input_file" -o -z "$_flag_transcript" -o -z "$_flag_tmp_dir" ]
        echo "The flags input_file transcript and tmp_dir are required" >&2
        return 1
    end

    set output_file "$_flag_tmp_dir/$(uuid).mkv"
    ffmpeg -i "$_flag_input_file" -vf subtitles="$_flag_transcript" "$output_file" >&2 || return 1
    echo "$output_file"
end

function main -V _flag_youtube_prep -V _flag_keep_intermediate -a argv
    # Select files that we want to process
    if [ -n "$argv" ]
        set target_files $argv
    else
        echo "Searching for files"
        set target_files (find-files-recursively)
    end

    # Validate
    for f in $target_files
        if ! [ -f $f ]
            echo "ERROR: this file does not exsist: $f"
            return 1
        end
    end

    # Let user confirm targeted Files
    echo "Target Files:"
    for f in $target_files
        echo "$f"
    end

    if [ -z "$_flag_yes" ]
        read -p 'echo Pess enter to continue.'
    end

    # Process each file
    for file in $target_files
        set tmp_dir "/tmp/process_conversations/$(uuid)"
        mkdir -p "$tmp_dir"

        # We will now pass the file through a pipeline of transformations on the video file.
        set current_file "$file"

        # Convert to mkv. Required for some processing steps
        set output_file "$tmp_dir/$(uuid).mkv"
        ffmpeg -i "$current_file" -c copy "$output_file" || return 1
        set current_file "$output_file"

        echo tmp_dir $tmp_dir >&2
        if "$NORMALIZE"
            set current_file (normalize --input_file "$current_file" --tmp_dir "$tmp_dir" || return 1)
        end
        
        if "$DENOISE"
            set current_file (denoise --input_file "$current_file" --tmp_dir "$tmp_dir" || return 1)
        end

        if "$CUT_SILENCE"
            set current_file (cut-silence --input_file "$current_file" --tmp_dir "$tmp_dir" || return 1)
        end

        set transcript (generate-transcript --input_file "$current_file" --tmp_dir "$tmp_dir" || return 1)
        # set current_file (embed-subtitles --input_file "$current_file" --transcript "$transcript" --tmp_dir "$tmp_dir" || return 1)


        echo -e "\nCopying final files"
        set ext (path extension "$file")
        ffmpeg -y -i "$current_file" -c copy (basename "$file" "$ext")_FIN"$ext" || return 1
        cp "$transcript" (basename "$file" "$ext")_FIN.vtt

        # For youtube uploading, generate a separate video file that has the subtitles baked into the video and an srt for the youtube transcription box.
        if [ -n "$_flag_youtube_prep" ]
            set baked_subs_file (bake-subtitles --input_file "$current_file" --transcript "$transcript" --tmp_dir "$tmp_dir" || return 1)
            ffmpeg -y -i "$baked_subs_file" -c copy (basename "$file" "$ext")_FIN_BAKE"$ext" || return 1
        end

        # Cleanup
        if [ -z "$_flag_keep_intermediate" ]
            rm -r "$tmp_dir" || return 1
        end
    end
end

main $argv || return 1
