import secrets
import argparse
from pathlib import Path
from pdb import set_trace as st
import sys
from subprocess import check_output

import pyperclip

project_dir = Path(__file__).absolute().parent
eff_word_list = project_dir / 'eff_large_wordlist.txt'

parser = argparse.ArgumentParser(description='Generate a password based on the EFF_large_word_list, using cryptographic secure randomization.')
parser.add_argument('-n', '--number-of-words', type=int, default=10, help='The number of words the password should have')
parser.add_argument('-s', '--spacer', type=str, default=' ', help='The string to intersperse between words.')
parser.add_argument('--number', action='store_true', help='Include a constant number.')
parser.add_argument('--special', action='store_true', help='Include a constant special character.')
parser.add_argument('--capital', action='store_true', help='Include a constant special character.')
parser.add_argument('-g', '--goodheart', action='store_true', help='Equal to --spacer --number --capital')
args = parser.parse_args()

if args.goodheart:
    args.number = True
    args.special = True
    args.capital = True

with eff_word_list.open() as f:
    lines = f.readlines()

words = []
for e in lines:
    k,v = e.strip().split('\t')
    words.append(v)

password = ""
for i in range(args.number_of_words):
    idx = secrets.randbelow(len(words))
    password += f"{words[idx]}{args.spacer if i < args.number_of_words - 1 else ''}"

password = password.strip()

# Add a constant prefix to get the password accepted by password requirement checkers
prefix = ""
if args.capital:
    prefix += "A"
if args.number:
    prefix += "1"
if args.special:
    prefix += "!"

if prefix != "":
    password = f"{prefix}{args.spacer}{password}"

pyperclip.copy(password)

print(password, end='')

if sys.stdout.isatty():
    print()
